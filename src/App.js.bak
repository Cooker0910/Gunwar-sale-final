import "bootstrap/dist/css/bootstrap.min.css";
import "react-notifications/lib/notifications.css";
import "react-responsive-modal/styles.css";

import { BrowserRouter, Routes, Route } from "react-router-dom";
import React, { useEffect, useState, useCallback, useReducer } from "react";
import {NotificationContainer,  NotificationManager} from "react-notifications";

import Web3Modal from "web3modal";
import WalletConnectProvider from "@walletconnect/web3-provider";
import { providers, ethers } from "ethers";
import Web3 from "web3";

import AppLayout from "./layouts/AppLayout";
import Navigation from "./components/header/Navigation";
import AppSpinner from './components/loading/AppSpinner';
import { frontRoutes, innerRoutes } from "./routes/routes";
import AlertModal from "./components/elements/AlertModal";
import NotFound from "./pages/error/NotFound";
import check from './assets/images/check.png';
import abi from "./constants/abi.json";
import { whitelist } from "./constants/whitelist";

const INFURA_ID = "88b3ca144c6648df843909df0371ee08";

const providerOptions = {
  walletconnect: {
    package: WalletConnectProvider, // required
    options: {
      infuraId: INFURA_ID, // required
    },
  },
};

let web3Modal;
if (typeof window !== "undefined") {
  web3Modal = new Web3Modal({
    network: 'mainnet', // optional
    cacheProvider: true,
    providerOptions, // required
    // theme: "dark",
  });
}

const initialState = {
  provider: null,
  web3Provider: null,
  address: null,
  chainId: null,
};

function reducer(state, action) {
  switch (action.type) {
    case "SET_WEB3_PROVIDER":
      return {
        ...state,
        provider: action.provider,
        web3Provider: action.web3Provider,
        address: action.address,
        chainId: action.chainId,
      };
    case "SET_ADDRESS":
      return {
        ...state,
        address: action.address,
      };
    case "SET_CHAIN_ID":
      return {
        ...state,
        chainId: action.chainId,
      };
    case "RESET_WEB3_PROVIDER":
      return initialState;
    default:
      throw new Error();
  }
}

var adminWallet = "0x52aC1AD50ECf7726CB666A8bb3B3b443a6824d7e";
var successMessage = 'You have purchased successfully.';
var isWhitelistMessage = "Congrats, your wallet address is whitelisted";
var notWhitelistMessage = "Sorry, your wallet address isn't in our whitelist, pls check rules with our community at Telegram";

const busdAddress = '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56';
const web3 = new Web3(window.ethereum)
const contract = new web3.eth.Contract(abi, busdAddress);

// const busdAddress = '0x7C1987977227fa66B072C3d9814E4082601637e4'; //test
// const contract = new web3.eth.Contract(testAbi, busdAddress); //test

const App = () => {
  const routes = [...frontRoutes, ...innerRoutes];
  const [account, setAccount] = useState('');
  const [userAddress, setUserAddress] = useState('');
  const [progress, setProgress] = useState(0);
  const [signer, setSigner] = useState();
  const [loading, setLoading] = useState(false) ;
  const [modalImg, setModalImg] = useState('');
  const [modalMessage, setModalMesage] = useState('');
  const [whitelistFlag, setWhitelistFlag] = useState(false);
  const [whitelistDisplay, setWhitelistDisplay] = useState(false);
  const [open, setOpen] = useState(false);
  const [busdAmount, setBusdAmount] = useState(0);

  const onOpenModal = () => setOpen(true);
  const onCloseModal = () => setOpen(false);

  let initValue = 0;
  let initValue_busd =0 ;
  const init = async () =>{
    initValue = await contract.methods.balanceOf(adminWallet).call();
    initValue_busd = initValue/1000000000000000000;
    setProgress((initValue_busd/270000).toFixed(2));
  }
  init();

  const purchase = async (amount) => {
    const amountBNB = ethers.utils.parseEther(amount.toString());
    const balanceOf = await contract.methods.balanceOf(userAddress).call();
    if ( balanceOf < (amount*1000000000000000000)) {
      NotificationManager.warning(
        "Insufficient funds for transfer",
        "",
        3000
      );
      return;
    }

    setLoading(true);
    const res = await contract.methods
    .transfer(adminWallet, amountBNB).send({from: userAddress})
    .on('error', (error) => {
      console.log(error);
      setLoading(false);
    })
    .then(function(receipt) {
      setModalImg(check);
      setModalMesage(successMessage)
      onOpenModal();
      setProgress(((initValue_busd+amount)/270000).toFixed(2));
      setLoading(false);
    });
  };

  useEffect(() => {
    setSigner(signer);
  }, [signer]);

  const [state, dispatch] = useReducer(reducer, initialState);
  const { provider, web3Provider } = state;

  const connect = useCallback(async function () {
    // This is the initial `provider` that is returned when
    // using web3Modal to connect. Can be MetaMask or WalletConnect.
    const provider = await web3Modal.connect();
    if (window.ethereum) {
      try {
        // check if the chain to connect to is installed
        await window.ethereum.request({
          method: 'wallet_switchEthereumChain',
          params: [{ chainId: '0x38' }], // chainId must be in hexadecimal numbers
        });
      } catch (error) {
        // This error code indicates that the chain has not been added to MetaMask
        // if it is not, then install it into the user MetaMask
        if (error.code === 4902) {
          try {
            await window.ethereum.request({
              method: 'wallet_addEthereumChain',
              params: [
                {
                  chainId: '0x38',
                  rpcUrl: 'https://bsc-dataseed1.defibit.io/',
                },
              ],
            });
          } catch (addError) {
            console.error(addError);
          }
        }
        console.error(error);
      }
    } else {
      // if no window.ethereum then MetaMask is not installed
      alert('MetaMask is not installed. Please consider installing it: https://metamask.io/download.html');
    } 

    // We plug the initial `provider` into ethers.js and get back
    // a Web3Provider. This will add on methods from ethers.js and
    // event listeners such as `.on()` will be different.
    const web3Provider = new providers.Web3Provider(provider);
    const signer = web3Provider.getSigner();
    const user_address = await signer.getAddress();
    const network = await web3Provider.getNetwork();
    const address = user_address.slice(0, 5) + '...'+ user_address.slice(-4, user_address.length)
    setSigner(web3Provider.getSigner());
    setAccount(address);
    setUserAddress(user_address);
    setWhitelistDisplay(true)
    
    const addrs = whitelist.split(',');
    addrs.forEach(element => {
      if (element.toLowerCase() === user_address.toLowerCase()) {
        setWhitelistFlag(true)
        console.log(1)
      }
    });

    dispatch({
      type: "SET_WEB3_PROVIDER",
      provider,
      web3Provider,
      address,
      chainId: network.chainId,
    });
  }, []);

  const disconnect = useCallback(
    async function () {
      await web3Modal.clearCachedProvider();
      await setWhitelistDisplay(false)
      if (provider?.disconnect && typeof provider.disconnect === "function") {
        await provider.disconnect();
      }

      dispatch({
        type: "RESET_WEB3_PROVIDER",
      });
    },
    [provider]
  );

  // Auto connect to the cached provider
  useEffect(() => {
    if (web3Modal.cachedProvider) {
      connect();
    }
  }, [connect]);

  return (
    <BrowserRouter>
      <Navigation 
        account={account}
        connect={connect}
        disconnect={disconnect}
        web3Provider={web3Provider} 
      />
      <AppLayout>
        <Routes>
          {routes.map(
            (route, idx) =>
              route.component && (
                <Route
                  key={idx}
                  path={route.path}
                  name={route.name}
                  element={<route.component 
                      onClick={purchase}
                      progress={progress}
                      whitelistFlag={whitelistFlag}
                      isWhitelistMessage = {isWhitelistMessage}
                      notWhitelistMessage = {notWhitelistMessage}
                      whitelistDisplay = {whitelistDisplay}
                    />}
                />
              )
          )}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </AppLayout>
      <AlertModal 
        open={open}
        img={modalImg}
        message={modalMessage}
        close={onCloseModal}
      />
      {loading && <AppSpinner absolute />}
      <NotificationContainer />
    </BrowserRouter>
  );
};

export default App;
